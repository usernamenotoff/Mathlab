Implementați o aplicație grafică (AWT sau Swing) care definește o clasă numită Student cu atributele
nume (valoare textuală), nota1 (valoare numerică), nota2 (valoare numerică), nota3 (valoare numerică).
Clasa are metode constructor și setter/getter corespunzătoare. (2p).
Metodele setter verifică notele și dacă nu se încadrează în intervalul 1-10, valoarea atributului
corespunzător se setează pe 1 (1p).
Clasa suprascrie metoda toString() pentru a permite afișarea datelor unui obiect în formatul nume:
nota1, nota2, nota3 (1p)
Pe ecran există 4 componente de tip text în care utilizatorul poate introduce datele aferente unui obiect
de tipul Student (1p).
La apăsarea unui buton (2p) se preiau de pe ecran valorile introduse și se folosesc pentru configurarea
unui nou obiect de tip Student. Informațiile noului student vor fi adăugate pe un rând nou într-o
componentă de tip text multi-linie (se folosește metoda toString() din clasa de mai sus) (1p).
La apăsarea unui alt buton, informația curentă din cîmpul de text multi-linie va fi scrisă într-un fișier cu
numele predefinit (1p) sau introdus de utilizator într-o componentă predefinită destinată salvării
fișierelor (1p).



package laborator;

class Student {
    private String nume;
    private int nota1;
    private int nota2;
    private int nota3;

    public Student(String nume, int nota1, int nota2, int nota3) {
        this.nume = nume;
        this.setNota1(nota1);
        this.setNota2(nota2);
        this.setNota3(nota3);
    }

    public String getNume() {
        return nume;
    }

    public void setNume(String nume) {
        this.nume = nume;
    }

    public int getNota1() {
        return nota1;
    }

    public void setNota1(int nota1) {
        if (nota1 >= 1 && nota1 <= 10) {
            this.nota1 = nota1;
        } else {
            this.nota1 = 1;
        }
    }

    public int getNota2() {
        return nota2;
    }

    public void setNota2(int nota2) {
        if (nota2 >= 1 && nota2 <= 10) {
            this.nota2 = nota2;
        } else {
            this.nota2 = 1;
        }
    }

    public int getNota3() {
        return nota3;
    }

    public void setNota3(int nota3) {
        if (nota3 >= 1 && nota3 <= 10) {
            this.nota3 = nota3;
        } else {
            this.nota3 = 1;
        }
    }

    @Override
    public String toString() {
        return nume + ": " + nota1 + ", " + nota2 + ", " + nota3;
    }
} 




package laborator;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class StudentGUI extends JFrame {
    private JTextField numeTextField, nota1TextField, nota2TextField, nota3TextField;
    private JTextArea studentTextArea;

    public StudentGUI() {
        // Setează proprietățile ferestrei
        setTitle("Adăugare Student");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new FlowLayout());
        setSize(400, 300);

        // Creează etichetele și câmpurile de introducere pentru datele studentului
        JLabel numeLabel = new JLabel("Nume:");
        numeTextField = new JTextField(15);
        JLabel nota1Label = new JLabel("Nota 1:");
        nota1TextField = new JTextField(5);
        JLabel nota2Label = new JLabel("Nota 2:");
        nota2TextField = new JTextField(5);
        JLabel nota3Label = new JLabel("Nota 3:");
        nota3TextField = new JTextField(5);

        // Creează butonul pentru adăugarea studentului
        JButton adaugaButton = new JButton("Adaugă Student");
        adaugaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                adaugaStudent();
            }
        });

        // Creează componenta pentru afișarea informațiilor studenților
        studentTextArea = new JTextArea(10, 30);
        studentTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(studentTextArea);

        // Creează butonul pentru salvarea în fișier
        JButton salvareButton = new JButton("Salvează în fișier");
        salvareButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                salvareInFisier();
            }
        });

        // Adaugă componentele în fereastră
        add(numeLabel);
        add(numeTextField);
        add(nota1Label);
        add(nota1TextField);
        add(nota2Label);
        add(nota2TextField);
        add(nota3Label);
        add(nota3TextField);
        add(adaugaButton);
        add(scrollPane);
        add(salvareButton);
    }

    private void adaugaStudent() {
        String nume = numeTextField.getText();
        int nota1 = Integer.parseInt(nota1TextField.getText());
        int nota2 = Integer.parseInt(nota2TextField.getText());
        int nota3 = Integer.parseInt(nota3TextField.getText());

        // Verifică notele și setează valorile în intervalul 1-10 dacă nu se încadrează
        if (nota1 < 1 || nota1 > 10) {
            nota1 = 1;
        }
        if (nota2 < 1 || nota2 > 10) {
            nota2 = 1;
        }
        if (nota3 < 1 || nota3 > 10) {
            nota3 = 1;
        }

        Student student = new Student(nume, nota1, nota2, nota3);
        studentTextArea.append(student.toString() + "\n");

        // Resetarea câmpurilor de introducere
        numeTextField.setText("");
        nota1TextField.setText("");
        nota2TextField.setText("");
        nota3TextField.setText("");
    }

    private void salvareInFisier() {
        String continut = studentTextArea.getText();
        try (PrintWriter writer = new PrintWriter(new FileWriter("studenti.txt"))) {
            writer.println(continut);
            writer.flush();
            JOptionPane.showMessageDialog(this, "Datele au fost salvate în fișier!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Eroare la salvarea în fișier: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                StudentGUI studentGUI = new StudentGUI();
                studentGUI.setVisible(true);
            }
        });
    }
}
